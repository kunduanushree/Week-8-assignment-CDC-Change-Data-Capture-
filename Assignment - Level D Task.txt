-- 1. Create the DateDimension Table
-- This table will store various attributes for each date.
-- The 'SKDate' column is set as the PRIMARY KEY.
IF OBJECT_ID('dbo.DateDimension', 'U') IS NOT NULL
    DROP TABLE dbo.DateDimension;
GO

CREATE TABLE dbo.DateDimension (
    SKDate INT PRIMARY KEY,             
    KeyDate DATE,                       
    Date DATE,                          
    CalendarDay INT,
    CalendarMonth INT,
    CalendarQuarter INT,
    CalendarYear INT,
    DayNameLong VARCHAR(20),
    DayNameShort VARCHAR(10),
    DayNumberOfWeek INT,
    DayNumberOfYear INT,
    DaySuffix VARCHAR(5),
    FiscalWeek INT,
    FiscalPeriod INT,
    FiscalQuarter INT,
    FiscalYear INT,
    [Fiscal Year/Period] INT
);
GO

-- 2. Create the Stored Procedure
-- This procedure populates the DateDimension table for a given year.
-- It takes one input parameter: @InputDate, which can be any date within the target year.
-- Constraint: Uses only one INSERT statement.
IF OBJECT_ID('dbo.PopulateDateDimension', 'P') IS NOT NULL
    DROP PROCEDURE dbo.PopulateDateDimension;
GO

CREATE PROCEDURE dbo.PopulateDateDimension
    @InputDate DATE
AS
BEGIN
    SET NOCOUNT ON; -- Suppress the message showing the count of rows affected.

    -- Declare variables to hold the target year's start and end dates
    DECLARE @StartDate DATE = DATEFROMPARTS(YEAR(@InputDate), 1, 1);
    DECLARE @EndDate DATE = DATEFROMPARTS(YEAR(@InputDate), 12, 31);

    -- Use a Common Table Expression (CTE) to generate all dates within the target year.
    -- This recursive CTE starts from the first day of the year and adds one day
    -- until it reaches the last day of the year.
    WITH DateSeries AS (
        SELECT @StartDate AS [Date]
        UNION ALL
        SELECT DATEADD(DAY, 1, [Date])
        FROM DateSeries
        -- CRITICAL CORRECTION: Changed from '<' to '<=' to ensure December 31st is included.
        WHERE [Date] <= @EndDate
    )
    -- Perform a single INSERT statement to populate the dbo.DateDimension table.
    -- All required date attributes are calculated within this SELECT statement.
    INSERT INTO dbo.DateDimension (
        SKDate, KeyDate, Date, CalendarDay, CalendarMonth, CalendarQuarter, CalendarYear,
        DayNameLong, DayNameShort, DayNumberOfWeek, DayNumberOfYear, DaySuffix,
        FiscalWeek, FiscalPeriod, FiscalQuarter, FiscalYear, [Fiscal Year/Period]
    )
    SELECT
        CONVERT(INT, FORMAT([Date], 'yyyyMMdd')) AS SKDate,
        [Date] AS KeyDate,
        [Date],
        DAY([Date]) AS CalendarDay,
        MONTH([Date]) AS CalendarMonth,
        DATEPART(QUARTER, [Date]) AS CalendarQuarter,
        YEAR([Date]) AS CalendarYear,
        DATENAME(WEEKDAY, [Date]) AS DayNameLong,
        LEFT(DATENAME(WEEKDAY, [Date]), 3) AS DayNameShort,
        DATEPART(WEEKDAY, [Date]) AS DayNumberOfWeek,
        DATEPART(DAYOFYEAR, [Date]) AS DayNumberOfYear,
        CASE
            WHEN DAY([Date]) IN (1,21,31) THEN CAST(DAY([Date]) AS VARCHAR) + 'st'
            WHEN DAY([Date]) IN (2,22) THEN CAST(DAY([Date]) AS VARCHAR) + 'nd'
            WHEN DAY([Date]) IN (3,23) THEN CAST(DAY([Date]) AS VARCHAR) + 'rd'
            ELSE CAST(DAY([Date]) AS VARCHAR) + 'th'
        END AS DaySuffix,
        DATEPART(WEEK, [Date]) AS FiscalWeek,
        MONTH([Date]) AS FiscalPeriod,           -- Assuming Fiscal = Calendar
        DATEPART(QUARTER, [Date]) AS FiscalQuarter,
        YEAR([Date]) AS FiscalYear,
        YEAR([Date]) * 100 + MONTH([Date]) AS [Fiscal Year/Period]
    FROM DateSeries
    OPTION (MAXRECURSION 366); -- For leap years
END;
GO

